#summary some definitions of the pogel API.
<wiki:toc max_depth="3" />
= Object class =
'class POGEL::OBJECT'
== constructors: ==
{{{
POGEL::OBJECT();
POGEL::OBJECT(unsigned int p);
POGEL::OBJECT(POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p);
POGEL::OBJECT(POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p, POGEL::POINT pos, POGEL::POINT rot);
                
POGEL::OBJECT(const char* name);
POGEL::OBJECT(const char* name, unsigned int p);
POGEL::OBJECT(const char* name, POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p);
POGEL::OBJECT(const char* name, POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p, POGEL::POINT pos, POGEL::POINT rot);

OBJECT(POGEL::OBJECT* obj);
}}}

  * `p` properties. appropriate values are:
    * `OBJECT_DEBUG`
    * `OBJECT_DRAW_DISPLAYLIST`
    * `OBJECT_DRAW_COLORED_STRIP`
    * `OBJECT_DRAW_CHILDREN`
    * `OBJECT_ROTATE_XYZ`
    * `OBJECT_SORT_TRIANGLES`
    * `OBJECT_ROTATE_TOCAMERA`
  * `tri` an array of triangles.
  * `trinum` number of triangles in the array `tri`.
  * `pos` a point object that is the object's position.
  * `rot` a point object for the object's rotation.
  * `name` a char array for the name of the object.
  * `obj` pointer to object to copy, beware all pointers are referenced.

== attributes: ==
{{{
POGEL::POINT position; // the center position of the object
POGEL::POINT rotation; // the rotation around the center of the object
POGEL::VECTOR direction; // the movement vector
POGEL::VECTOR spin; // the spin vector
unsigned int base; // the pointer to the compiled display list
POGEL::MATRIX matrix;
bool visable;
}}}

  * `position` the position of the object, is modifiable.
  * `rotation` the rotation of the object.
  * `direction` the direction and velocity vector.
  * `spin` the rotation velocity.
  * `base` the opengl draw list pointer thingy...
  * `matrix` the matrix for getting rotation and position modifications, will be overwitten at each call of `draw()`.
  * `visable` weather or not to draw the object.

== methods: ==

{{{
void killchildren();
}}}
destroys all child objects.
{{{
PROPERTIES_METHODS;
}}}
modifies the properties.
{{{
void setname(const char *n);
}}}
sets the name of the object.
{{{
char* getname();
}}}
returns the pointer to the char string of the object's name.
{{{
std::string getsname();
}}}
returns a c++ std::string of the object's name.
{{{
unsigned long getchildslot();
}}}
returns the index of this object's position in its parents children.
{{{
void translate(POGEL::VECTOR);
void translate(POGEL::VECTOR,float);
}}}
moves the object by the vector.
{{{
void moveto(POGEL::POINT p);
}}}
moves the object to point `p`.
{{{
void rotate(POGEL::VECTOR);
void rotate(POGEL::VECTOR,float);
}}}
turns the object by the vector.
{{{
void turnto(POGEL::POINT r);
}}}
rotates the object to `r`.
{{{
unsigned long addtriangle(POGEL::TRIANGLE);
}}}
adds a triangle to the object.
{{{
void addtriangles(POGEL::TRIANGLE* tri, unsigned long l);
}}}
adds `l` number of triangles from array `tri`.
{{{
void addtrianglespace(unsigned long);
}}}
allocates empty space for a batch of triangles to be added.
{{{
void cleartriangles();
}}}
destroys and removes all triangles from the object.
{{{
unsigned long addobject(POGEL::OBJECT* obj);
}}}
adds `obj` as a child object.
{{{
void addobjects(POGEL::OBJECT** objs, unsigned long n);
}}}
adds `n` objects from `objs` as child objects.
{{{
void scroll_all_tex_values(float u, float v);
}}}
adds `u` and `v` to the texture positions on all verticies of all triangles in the object.
{{{
POGEL::OBJECT* getchild(const char* n);
}}}
returns child object of name `n`.
{{{
POGEL::OBJECT* getdecendant(const char* n, bool self);
POGEL::OBJECT* getdecendant(const char* n);
}}}
returns descendant object of name `n`.
{{{
POGEL::OBJECT* getancestor(const char* n);
}}}
returns ancestral object of name `n`.
{{{
POGEL::OBJECT* getprogenitor();
}}}
returns the object at the top of the 'family' tree of objects.
{{{
char *getancestory();
}}}
returns a char string of all the names of all the objects from the progenitor object to this object.
{{{
char *getancestoryhash();
}}}
returns a char string off the name of the progenitor object and the child slot indices to this object.
{{{
POGEL::MATRIX getancestorialmatrix();
}}}
returns the complete matrix transforms of the ancestory of this object.
{{{
unsigned long getnumfaces();
}}}
returns the number of triangles in this object.
{{{
POGEL::TRIANGLE gettriangle(unsigned long i);
}}}
returns triangle of index `i`.
{{{
POGEL::TRIANGLE* gettrianglelist();
}}}
returns the pointer to the array of triangles. beware not safe to modify, only for access.
{{{
void copytriangles(POGEL::OBJECT* o);
}}}
copies all the triangles of object `o` rel=placing this objects triangles. note: allocates new space for these triangles.
{{{
void referencetriangles(POGEL::OBJECT* o);
}}}
copies the pointers to the triangles of object `o`, clearing all of this objects triangles.
{{{
void settriangle(unsigned long i, POGEL::TRIANGLE t);
}}}
replaces triangle of index `i` with triangle `t`.
{{{
void increment();
}}}
adds `direction` to `position`, and adds `spin` to `rotation`.
{{{
virtual void build();
}}}
initializes the object for drawing, checking for fatal errors in initialization.
{{{
virtual void draw();
}}}
draws the object.
{{{
virtual void stepFunc();
}}}
stub.
{{{
virtual void step();
}}}
calls `increment()` then `stepFunc()`.
{{{
virtual void create();
virtual void destroy();
}}}
stubs for `POGEL::FRACTAL`.