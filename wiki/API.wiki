#summary some definitions of the pogel API.
#labels Featured

<wiki:toc max_depth="3" />

----

= Point class =
`class POGEL::POINT`
== constructors: ==
{{{
POGEL::POINT();
POGEL::POINT(float a, float b, float c);
POGEL::POINT(std::string s);
}}}

  * `a` desired x co-ordinate.
  * `b` desired y co-ordinate.
  * `c` desired z co-ordinate.
  * `s` c++ standard string with the desired coordinates. it must have this format: "{[x],[y],[z]}", where `x`, `y`, and `z` are decimal values in string form refrering to their respective dimentions.

== attributes: ==
{{{
float x;
float y;
float z;
}}}

  * `x` x co-ordinate.
  * `y` y co-ordinate.
  * `z` z co-ordinate.

== methods: ==

{{{
void get_values(float *a, float *b, float *c);
}}}
inserts the values of the x, y, and z co-ordinates of the point into `a`, `b`, and `c`, respectively.
{{{
void set_values(float a, float b, float c);
}}}
sets the x, y, and z, values to `a`, `b`, and `c`, respectively.
{{{
void print();
}}}
calls `POGEL::message()` to print the co-ordinates to stdout.
{{{
std::string toString();
}}}
retruns a c++ standard string with the points co-ordinates in the format: "{[x],[y],[z]}".
{{{
void draw();
void draw(unsigned int s);
void draw(unsigned int s, POGEL::COLOR c);
}}}
draws the point, with size `s` and color `c`.
{{{
void drawto(POGEL::POINT p);
}}}
draws a line from this point to point `p`.
{{{
void translate();
}}}
calls `glTranslatef()` for this points co-ordinates.
{{{
float distance(POGEL::POINT p);
}}}
returns the distance ftom this point to point `p`.
{{{
bool isbad();
}}}
returns false if all co-ordinates are numbers, true if any are `nan` or "not a number".

== operators: ==
{{{
POGEL::POINT operator*(float a);
}}}
returns a point object with the co-ordinates of this point, but miltiplied by `a`.
{{{
POGEL::POINT operator/(float a);
}}}
returns a point object with the co-ordinates of this point, but divided by `a`.
{{{
POGEL::POINT operator*(POGEL::POINT p);
}}}
returns a point object with the co-ordinates of this point, but with x, y, and z miltiplied by the x, y, and z of point `p`.
{{{
POGEL::POINT operator/(POGEL::POINT p);
}}}
returns a point object with the co-ordinates of this point, but with x, y, and z divided by the x, y, and z of point `p`.
{{{
POGEL::POINT operator+(POGEL::POINT p);
}}}
returns a point object with co-ordinates that are the sums of this points and those of point `p`.
{{{
POGEL::POINT operator-(POGEL::POINT p);
}}}
returns a point object with co-ordinates that are the differences of this points and those of point `p`.
{{{
POGEL::POINT& operator=(const POGEL::POINT& p);
}}}
assignes this points co-ordinates to those of point `p`.
{{{
POGEL::POINT& operator*=(const float& a);
}}}
assignes this points co-ordinates as this points co-ordinates multiplied by `a`.
{{{
POGEL::POINT& operator/=(const float& a);
}}}
assignes this points co-ordinates as this points co-ordinates divided by `a`.
{{{
POGEL::POINT& operator*=(const POGEL::POINT& p);
}}}
assignes this points co-ordinates as this points co-ordinates multiplied by the respective co-ordinates of point `p`.
{{{
POGEL::POINT& operator/=(const POGEL::POINT& p);
}}}
assignes this points co-ordinates as this points co-ordinates divided by the respective co-ordinates of point `p`.
{{{
POGEL::POINT& operator+=(const POGEL::POINT& p);
}}}
assignes this points co-ordinates as this points co-ordinates added to the respective co-ordinates of point `p`.
{{{
POGEL::POINT& operator-=(const POGEL::POINT& p);
}}}
assignes this points co-ordinates as this points co-ordinates minus the respective co-ordinates of point `p`.
{{{
bool operator==(POGEL::POINT p);
bool operator!=(POGEL::POINT p);
}}}
compares this points co-ordinates to those of point `p`.

----

= Vector class =
`class POGEL::VECTOR` is an extention of `class POGEL::POINT`
== constructors: ==
`POGEL::VECTOR` has all the constructors from `POGEL::POINT`.
{{{
POGEL::VECTOR(POGEL::POINT p);
}}}
the vector will point from the origin `(0,0,0)` to point `p`.
{{{
POGEL::VECTOR(POGEL::POINT p1, POGEL::POINT p2);
}}}
the vector will point in the direction from `p1` to `p2`.

== attributes: ==
`POGEL::VECTOR` has all the same attributes as `POGEL::POINT`.

== methods: ==
{{{
void normalize();
}}}
modifies this vector to have a distance of 1.0.
{{{
POGEL::VECTOR normal();
}}}
retruns a vector with this vectors direction but with a length of 1.0. does not modify this vector.
{{{
void anglenormalize();
}}}
modifies the vector to have its x, y, and z values to be less than 180.0, but greater than -180.0.
{{{
POGEL::VECTOR anglenormal();
}}}
returns a copy of this vector that `anglenormalize()` was called for.
{{{
float getdistance();
}}}
retruns the lingth of the vector.
{{{
float getangle(POGEL::VECTOR,POGEL::VECTOR);
}}}
EXPIRAMENTAL: retruns the angle in degreess between this vector and another referencing a third vector.
{{{
POGEL::VECTOR& dodotproduct(POGEL::VECTOR v);
}}}
returns the perpindicular vector between this vector and `v`.
{{{
float dotproduct(POGEL::VECTOR v);
}}}
retruns how far this vector travels allong vector `v`.
{{{
void frompoints(POGEL::POINT a, POGEL::POINT b);
}}}
sets this vector to the direction from vector `a` to vector `b`.

== operators: ==
`POGEL::VECTOR` has all the same operators as `POGEL::POINT`.

----

= Vertex class=
`class POGEL::VERTEX` is an extention of `class POGEL::POINT`
== constructors: ==
`POGEL::VERTEX` has all the constructors from `POGEL::POINT`.
{{{
POGEL::VERTEX(float a, float b, float c, float s, float t);
POGEL::VERTEX(POGEL::POINT p);
POGEL::VERTEX(std::string s);
}}}
  * `a` is the x co-ordinate.
  * `b` is the y co-ordinate.
  * `c` is the z co-ordinate.
  * `s` is the u texture co-ordinate.
  * `t` is the v texture co-ordinate.
  * `p` is the point to set the vertex as, u and v are set to 0.0.
  * `s` c++ standard string with the desired coordinates. it must have this format: "{[x],[y],[z],[u],[v],normal,color}", where `x`, `y`, `z`, `u`, and `v` are decimal values in string form refrering to their respective dimentions, `normal` is a vector with its respective string format, the same for `color`, bot refering to their respective attributes.

== attributes: ==
`POGEL::VERTEX` has all the same attributes as `POGEL::POINT`.
{{{
float u;
float v;
POGEL::COLOR color;
POGEL::VECTOR normal;
bool usable;
}}}
  * `u` is the x co-ordinate for texture mapping.
  * `v` is the y co-ordinate for texture mapping.
  * `color` is the color to make the vertex when drawing, if the triangle is set to do so.
  * `normal` is a vector to light the vertex if the triangle this vertex is in is set to have vertex defined lighting.
  * `usable` is a legacy attribute, keep it set to `true` at all times.

== methods: ==
`POGEL::VERTEX` has all the same methods as `POGEL::POINT`.
{{{
std::string toString();
}}}
retruns a c++ standard string with the vertex co-ordinates and information in the format: "{[x],[y],[z],[u],[v],normal,color}".
{{{
void get_values(float *a, float *b, float *c, float *s, float *t);
void set_values(float a, float b, float c, float s, float t);
void get_point_values(float *a, float *b, float *c);
void set_point_values(float a, float b, float c);
void get_tex_values(float *s, float *t);
void set_tex_values(float s, float t);
}}}
for retrieving  and setting the x, y, z, u, and v values of the vertex.
{{{
void scroll_tex_values(float s, float t);
}}}
adds `s` to the u value, and adds `t` to the v value of the vertex.
{{{
POGEL::POINT topoint()
}}}
returns a point object with the same x, y, and z co-ordinates as this vertex.

== operators: ==
`POGEL::VERTEX` has all the same operators as `POGEL::POINT`.
note:
{{{
POGEL::VERTEX& operator=(const POGEL::VERTEX& p);
}}}
modifies all the attributes.
{{{
POGEL::VERTEX& operator+=(const POGEL::VERTEX& p);
POGEL::VERTEX& operator-=(const POGEL::VERTEX& p);
}}}
modify the `x, `y`, `z`, `normal`, and `color` attributes, but not the `u`, and `v` attributes.
{{{
POGEL::VERTEX operator*(float a);
POGEL::VERTEX operator/(float a);
POGEL::VERTEX operator*(POGEL::VERTEX p);
POGEL::VERTEX operator/(POGEL::VERTEX p);
POGEL::VERTEX operator+(POGEL::VERTEX p);
POGEL::VERTEX operator-(POGEL::VERTEX p);
POGEL::VERTEX& operator*=(const float& a);
POGEL::VERTEX& operator/=(const float& a);
POGEL::VERTEX& operator*=(const POGEL::VERTEX& p);
POGEL::VERTEX& operator/=(const POGEL::VERTEX& p);
}}}
only modify the `x`, `y`, and `z` attributes, .

----

= Object class =
'class POGEL::OBJECT'
== constructors: ==
{{{
POGEL::OBJECT();
POGEL::OBJECT(unsigned int p);
POGEL::OBJECT(POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p);
POGEL::OBJECT(POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p, POGEL::POINT pos, POGEL::POINT rot);
                
POGEL::OBJECT(const char* name);
POGEL::OBJECT(const char* name, unsigned int p);
POGEL::OBJECT(const char* name, POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p);
POGEL::OBJECT(const char* name, POGEL::TRIANGLE* tri, unsigned long trinum, unsigned int p, POGEL::POINT pos, POGEL::POINT rot);

OBJECT(POGEL::OBJECT* obj);
}}}

  * `p` properties. appropriate values are:
    * `OBJECT_DEBUG`
    * `OBJECT_DRAW_DISPLAYLIST`
    * `OBJECT_DRAW_COLORED_STRIP`
    * `OBJECT_DRAW_CHILDREN`
    * `OBJECT_ROTATE_XYZ`
    * `OBJECT_SORT_TRIANGLES`
    * `OBJECT_ROTATE_TOCAMERA`
  * `tri` an array of triangles.
  * `trinum` number of triangles in the array `tri`.
  * `pos` a point object that is the object's position.
  * `rot` a point object for the object's rotation.
  * `name` a char array for the name of the object.
  * `obj` pointer to object to copy, beware all pointers are referenced.

== attributes: ==
{{{
POGEL::POINT position; // the center position of the object
POGEL::POINT rotation; // the rotation around the center of the object
POGEL::VECTOR direction; // the movement vector
POGEL::VECTOR spin; // the spin vector
unsigned int base; // the pointer to the compiled display list
POGEL::MATRIX matrix;
bool visable;
}}}

  * `position` the position of the object, is modifiable.
  * `rotation` the rotation of the object.
  * `direction` the direction and velocity vector.
  * `spin` the rotation velocity.
  * `base` the opengl draw list pointer thingy...
  * `matrix` the matrix for getting rotation and position modifications, will be overwitten at each call of `draw()`.
  * `visable` weather or not to draw the object.

== methods: ==

{{{
void killchildren();
}}}
destroys all child objects.
{{{
PROPERTIES_METHODS;
}}}
modifies the properties.
{{{
void setname(const char *n);
}}}
sets the name of the object.
{{{
char* getname();
}}}
returns the pointer to the char string of the object's name.
{{{
std::string getsname();
}}}
returns a c++ std::string of the object's name.
{{{
unsigned long getchildslot();
}}}
returns the index of this object's position in its parents children.
{{{
void translate(POGEL::VECTOR);
void translate(POGEL::VECTOR,float);
}}}
moves the object by the vector.
{{{
void moveto(POGEL::POINT p);
}}}
moves the object to point `p`.
{{{
void rotate(POGEL::VECTOR);
void rotate(POGEL::VECTOR,float);
}}}
turns the object by the vector.
{{{
void turnto(POGEL::POINT r);
}}}
rotates the object to `r`.
{{{
unsigned long addtriangle(POGEL::TRIANGLE);
}}}
adds a triangle to the object.
{{{
void addtriangles(POGEL::TRIANGLE* tri, unsigned long l);
}}}
adds `l` number of triangles from array `tri`.
{{{
void addtrianglespace(unsigned long);
}}}
allocates empty space for a batch of triangles to be added.
{{{
void cleartriangles();
}}}
destroys and removes all triangles from the object.
{{{
unsigned long addobject(POGEL::OBJECT* obj);
}}}
adds `obj` as a child object.
{{{
void addobjects(POGEL::OBJECT** objs, unsigned long n);
}}}
adds `n` objects from `objs` as child objects.
{{{
void scroll_all_tex_values(float u, float v);
}}}
adds `u` and `v` to the texture positions on all verticies of all triangles in the object.
{{{
POGEL::OBJECT* getchild(const char* n);
}}}
returns child object of name `n`.
{{{
POGEL::OBJECT* getdecendant(const char* n, bool self);
POGEL::OBJECT* getdecendant(const char* n);
}}}
returns descendant object of name `n`.
{{{
POGEL::OBJECT* getancestor(const char* n);
}}}
returns ancestral object of name `n`.
{{{
POGEL::OBJECT* getprogenitor();
}}}
returns the object at the top of the 'family' tree of objects.
{{{
char *getancestory();
}}}
returns a char string of all the names of all the objects from the progenitor object to this object.
{{{
char *getancestoryhash();
}}}
returns a char string off the name of the progenitor object and the child slot indices to this object.
{{{
POGEL::MATRIX getancestorialmatrix();
}}}
returns the complete matrix transforms of the ancestory of this object.
{{{
unsigned long getnumfaces();
}}}
returns the number of triangles in this object.
{{{
POGEL::TRIANGLE gettriangle(unsigned long i);
}}}
returns triangle of index `i`.
{{{
POGEL::TRIANGLE* gettrianglelist();
}}}
returns the pointer to the array of triangles. beware not safe to modify, only for access.
{{{
void copytriangles(POGEL::OBJECT* o);
}}}
copies all the triangles of object `o` rel=placing this objects triangles. note: allocates new space for these triangles.
{{{
void referencetriangles(POGEL::OBJECT* o);
}}}
copies the pointers to the triangles of object `o`, clearing all of this objects triangles.
{{{
void settriangle(unsigned long i, POGEL::TRIANGLE t);
}}}
replaces triangle of index `i` with triangle `t`.
{{{
void increment();
}}}
adds `direction` to `position`, and adds `spin` to `rotation`.
{{{
virtual void build();
}}}
initializes the object for drawing, checking for fatal errors in initialization.
{{{
virtual void draw();
}}}
draws the object.
{{{
virtual void stepFunc();
}}}
stub.
{{{
virtual void step();
}}}
calls `increment()` then `stepFunc()`.
{{{
virtual void create();
virtual void destroy();
}}}
stubs for `POGEL::FRACTAL`.
